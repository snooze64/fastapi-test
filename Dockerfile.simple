# Simple RAG-Anything Dockerfile with NVIDIA CUDA 11.1
FROM nvidia/cuda:11.1.1-devel-ubuntu20.04

# 環境変数設定
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# MinerU・Hugging Face・ModelScope キャッシュ設定
ENV MODELSCOPE_CACHE=/root/.cache/modelscope
ENV HF_HOME=/root/.cache/huggingface
ENV HF_DATASETS_CACHE=/root/.cache/huggingface/datasets
ENV TORCH_HOME=/root/.cache/torch

# 作業ディレクトリ設定
WORKDIR /app

# システムパッケージの更新とPython環境のセットアップ
# Ubuntu 20.04 + Python 3.8/3.9 (RAG-Anythingと互換性良好)
RUN apt-get update && apt-get install -y \
    software-properties-common \
    python3.9 \
    python3.9-dev \
    python3.9-distutils \
    python3.9-venv \
    curl \
    wget \
    git \
    build-essential \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libreoffice \
    libffi-dev \
    libssl-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Python 3.9をデフォルトに設定
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1

# pipをPython 3.9用にインストール
RUN curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py && \
    python3.9 get-pip.py && \
    rm get-pip.py

# Python依存関係
COPY requirements.txt ./
COPY requirements-gpu.txt ./
RUN pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install -r requirements-gpu.txt

# PyTorch CUDA版の追加インストール（CUDA 11.1対応）
# CUDA 11.1と互換性のあるPyTorchバージョンを使用
RUN pip install torch==1.10.2+cu111 torchvision==0.11.3+cu111 --extra-index-url https://download.pytorch.org/whl/cu111

# アプリケーションファイル
COPY raganything/ ./raganything/
COPY setup.py ./
COPY simple_api.py ./

# RAG-Anythingインストール
RUN pip install -e .

# ディレクトリ作成
RUN mkdir -p rag_storage output uploads

# MinerUモデルの事前ダウンロード（GPU環境で高速化）
# 初回実行時のモデルダウンロード時間を短縮するため、事前に必要なモデルをダウンロード
RUN echo "Preparing MinerU models..." && \
    python3 -c "
import os
import subprocess
print('Setting up MinerU model cache directories...')

# Create model cache directories
os.makedirs('/root/.cache/modelscope', exist_ok=True)
os.makedirs('/root/.cache/huggingface', exist_ok=True)
os.makedirs('./models', exist_ok=True)

# Set environment variables for model caching
os.environ['MODELSCOPE_CACHE'] = '/root/.cache/modelscope'
os.environ['HF_HOME'] = '/root/.cache/huggingface'

print('MinerU model directories prepared')
print('Models will be downloaded on first use to optimize container startup')
" || echo "Model preparation completed with warnings"

# ポート公開
EXPOSE 8000

# サーバー起動
CMD ["python", "simple_api.py"]